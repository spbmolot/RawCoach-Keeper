<?php

namespace App\Filament\Resources;

use App\Filament\Resources\RecipeResource\Pages;
use App\Filament\Resources\RecipeResource\RelationManagers;
use App\Models\Recipe;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class RecipeResource extends Resource
{
    protected static ?string $model = Recipe::class;
    
    protected static ?string $modelLabel = '–†–µ—Ü–µ–ø—Ç';
    protected static ?string $pluralModelLabel = '–†–µ—Ü–µ–ø—Ç—ã';
    protected static ?string $navigationLabel = '–†–µ—Ü–µ–ø—Ç—ã';
    protected static ?string $navigationGroup = '–ö–æ–Ω—Ç–µ–Ω—Ç';

    protected static ?string $navigationIcon = 'heroicon-o-book-open';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('title')
                            ->label('–ù–∞–∑–≤–∞–Ω–∏–µ')
                            ->required()
                            ->maxLength(255),
                        
                        Forms\Components\Textarea::make('description')
                            ->label('–û–ø–∏—Å–∞–Ω–∏–µ')
                            ->rows(3)
                            ->maxLength(1000),
                        
                        Forms\Components\Select::make('meal_type')
                            ->label('–¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏')
                            ->options([
                                'breakfast' => '–ó–∞–≤—Ç—Ä–∞–∫',
                                'lunch' => '–û–±–µ–¥',
                                'dinner' => '–£–∂–∏–Ω',
                                'snack' => '–ü–µ—Ä–µ–∫—É—Å',
                            ])
                            ->required(),
                        
                        Forms\Components\Select::make('difficulty')
                            ->label('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
                            ->options([
                                'easy' => '–õ–µ–≥–∫–æ',
                                'medium' => '–°—Ä–µ–¥–Ω–µ',
                                'hard' => '–°–ª–æ–∂–Ω–æ',
                            ])
                            ->required(),
                    ])->columns(2),
                
                Forms\Components\Section::make('–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è')
                    ->schema([
                        Forms\Components\TextInput::make('prep_time')
                            ->label('–í—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (–º–∏–Ω)')
                            ->numeric()
                            ->suffix('–º–∏–Ω'),
                        
                        Forms\Components\TextInput::make('cook_time')
                            ->label('–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–∫–∏ (–º–∏–Ω)')
                            ->numeric()
                            ->suffix('–º–∏–Ω'),
                        
                        Forms\Components\TextInput::make('servings')
                            ->label('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π')
                            ->numeric()
                            ->default(1),
                    ])->columns(3),
                
                Forms\Components\Section::make('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                    ->schema([
                        Forms\Components\FileUpload::make('image')
                            ->label('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞')
                            ->image()
                            ->directory('recipes')
                            ->maxSize(2048),
                    ]),
                
                Forms\Components\Section::make('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
                    ->schema([
                        Forms\Components\RichEditor::make('instructions')
                            ->label('–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
                            ->required()
                            ->columnSpanFull(),
                    ]),
                
                Forms\Components\Section::make('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
                    ->schema([
                        Forms\Components\Textarea::make('tips')
                            ->label('–°–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é')
                            ->rows(3),
                        
                        Forms\Components\TagsInput::make('tags')
                            ->label('–¢–µ–≥–∏')
                            ->placeholder('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥'),
                        
                        Forms\Components\Toggle::make('is_vegetarian')
                            ->label('–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ'),
                        
                        Forms\Components\Toggle::make('is_vegan')
                            ->label('–í–µ–≥–∞–Ω—Å–∫–æ–µ'),
                        
                        Forms\Components\Toggle::make('is_gluten_free')
                            ->label('–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞'),
                        
                        Forms\Components\Toggle::make('is_published')
                            ->label('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
                            ->default(false),
                    ])->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\ImageColumn::make('image')
                    ->label('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
                    ->circular(),
                
                Tables\Columns\TextColumn::make('title')
                    ->label('–ù–∞–∑–≤–∞–Ω–∏–µ')
                    ->searchable()
                    ->sortable(),
                
                Tables\Columns\BadgeColumn::make('meal_type')
                    ->label('–¢–∏–ø')
                    ->colors([
                        'success' => 'breakfast',
                        'primary' => 'lunch',
                        'warning' => 'dinner',
                        'secondary' => 'snack',
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'breakfast' => '–ó–∞–≤—Ç—Ä–∞–∫',
                        'lunch' => '–û–±–µ–¥',
                        'dinner' => '–£–∂–∏–Ω',
                        'snack' => '–ü–µ—Ä–µ–∫—É—Å',
                        default => $state,
                    }),
                
                Tables\Columns\BadgeColumn::make('difficulty')
                    ->label('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
                    ->colors([
                        'success' => 'easy',
                        'warning' => 'medium',
                        'danger' => 'hard',
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'easy' => '–õ–µ–≥–∫–æ',
                        'medium' => '–°—Ä–µ–¥–Ω–µ',
                        'hard' => '–°–ª–æ–∂–Ω–æ',
                        default => $state,
                    }),
                
                Tables\Columns\TextColumn::make('prep_time')
                    ->label('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞')
                    ->suffix(' –º–∏–Ω')
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('cook_time')
                    ->label('–ì–æ—Ç–æ–≤–∫–∞')
                    ->suffix(' –º–∏–Ω')
                    ->sortable(),
                
                Tables\Columns\TextColumn::make('servings')
                    ->label('–ü–æ—Ä—Ü–∏–π')
                    ->sortable(),
                
                Tables\Columns\IconColumn::make('is_vegetarian')
                    ->label('ü•¨')
                    ->boolean()
                    ->tooltip('–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ'),
                
                Tables\Columns\IconColumn::make('is_vegan')
                    ->label('üå±')
                    ->boolean()
                    ->tooltip('–í–µ–≥–∞–Ω—Å–∫–æ–µ'),
                
                Tables\Columns\IconColumn::make('is_gluten_free')
                    ->label('üåæ')
                    ->boolean()
                    ->tooltip('–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞'),
                
                Tables\Columns\IconColumn::make('is_published')
                    ->label('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
                    ->boolean(),
                
                Tables\Columns\TextColumn::make('created_at')
                    ->label('–°–æ–∑–¥–∞–Ω–æ')
                    ->dateTime()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('meal_type')
                    ->label('–¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏')
                    ->options([
                        'breakfast' => '–ó–∞–≤—Ç—Ä–∞–∫',
                        'lunch' => '–û–±–µ–¥',
                        'dinner' => '–£–∂–∏–Ω',
                        'snack' => '–ü–µ—Ä–µ–∫—É—Å',
                    ]),
                
                Tables\Filters\SelectFilter::make('difficulty')
                    ->label('–°–ª–æ–∂–Ω–æ—Å—Ç—å')
                    ->options([
                        'easy' => '–õ–µ–≥–∫–æ',
                        'medium' => '–°—Ä–µ–¥–Ω–µ',
                        'hard' => '–°–ª–æ–∂–Ω–æ',
                    ]),
                
                Tables\Filters\TernaryFilter::make('is_vegetarian')
                    ->label('–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ'),
                
                Tables\Filters\TernaryFilter::make('is_vegan')
                    ->label('–í–µ–≥–∞–Ω—Å–∫–æ–µ'),
                
                Tables\Filters\TernaryFilter::make('is_gluten_free')
                    ->label('–ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞'),
                
                Tables\Filters\TernaryFilter::make('is_published')
                    ->label('–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                Tables\Actions\DeleteAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            RelationManagers\IngredientsRelationManager::class,
            RelationManagers\NutritionRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRecipes::route('/'),
            'create' => Pages\CreateRecipe::route('/create'),
            'view' => Pages\ViewRecipe::route('/{record}'),
            'edit' => Pages\EditRecipe::route('/{record}/edit'),
        ];
    }
}
